; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30148.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0DN@PFOPAAJP@CFragmentGetDrawInput?5failed?5be@ ; `string'
PUBLIC	??_C@_0DI@DKLJCDOA@CFragmentGetDrawInput?5failed?5be@ ; `string'
PUBLIC	??_C@_0DN@GJPPPMJL@CFragmentGetDrawInput?5failed?5be@ ; `string'
PUBLIC	??_C@_0EJ@BOCFGNAF@CFragmentUnsafeGetDrawInputDire@ ; `string'
PUBLIC	??_C@_0EJ@ICDFJBAB@CFragmentUnsafeGetDrawInputDire@ ; `string'
PUBLIC	??_C@_0EG@BOLDLLL@CFragmentGetDrawInputSizeBytes?5@ ; `string'
PUBLIC	??_C@_0EG@JNPLMHLP@CFragmentGetDrawInputSizeBytes?5@ ; `string'
PUBLIC	??_C@_0DL@OCCPJFIJ@CFragmentGetVertexOutput?5failed@ ; `string'
PUBLIC	??_C@_0EA@EBHOJJGB@CFragmentGetVertexOutput?5failed@ ; `string'
PUBLIC	??_C@_0DN@FJOFMIAP@CFragmentGetVertexOutput?5failed@ ; `string'
PUBLIC	??_C@_0EM@MEONADAB@CFragmentUnsafeGetVertexOutputD@ ; `string'
PUBLIC	??_C@_0EJ@KLHEELBH@CFragmentUnsafeGetVertexOutputD@ ; `string'
PUBLIC	??_C@_0EO@BLOOMMA@CFragmentGetVertexOutputCompone@ ; `string'
PUBLIC	??_C@_0EL@MMKFHGGJ@CFragmentGetVertexOutputCompone@ ; `string'
PUBLIC	??_C@_0DO@HJDLONOA@CFragmentGetClassStaticData?5fai@ ; `string'
PUBLIC	??_C@_0ED@PCENFMFD@CFragmentGetClassStaticData?5fai@ ; `string'
PUBLIC	??_C@_0DK@LJHGJLBE@CFragmentGetClassStaticData?5fai@ ; `string'
PUBLIC	??_C@_0EM@INGJBLPH@CFragmentGetClassStaticDataSize@ ; `string'
PUBLIC	??_C@_0ED@LMJCLNFH@CFragmentGetClassStaticDataSize@ ; `string'
PUBLIC	??_C@_0DP@JEBODLA@CFragmentSampleRenderBuffer?5fai@ ; `string'
PUBLIC	??_C@_0EE@MODHJDEL@CFragmentSampleRenderBuffer?5fai@ ; `string'
PUBLIC	??_C@_0EC@GBNNCCDG@CFragmentSampleRenderBuffer?5fai@ ; `string'
EXTRN	__imp_fmodf:PROC
CONST	ENDS
;	COMDAT ??_C@_0EC@GBNNCCDG@CFragmentSampleRenderBuffer?5fai@
CONST	SEGMENT
??_C@_0EC@GBNNCCDG@CFragmentSampleRenderBuffer?5fai@ DB 'CFragmentSampleR'
	DB	'enderBuffer failed because sampleType was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@MODHJDEL@CFragmentSampleRenderBuffer?5fai@
CONST	SEGMENT
??_C@_0EE@MODHJDEL@CFragmentSampleRenderBuffer?5fai@ DB 'CFragmentSampleR'
	DB	'enderBuffer failed because renderBuffer was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@JEBODLA@CFragmentSampleRenderBuffer?5fai@
CONST	SEGMENT
??_C@_0DP@JEBODLA@CFragmentSampleRenderBuffer?5fai@ DB 'CFragmentSampleRe'
	DB	'nderBuffer failed because inOutColor was NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@LMJCLNFH@CFragmentGetClassStaticDataSize@
CONST	SEGMENT
??_C@_0ED@LMJCLNFH@CFragmentGetClassStaticDataSize@ DB 'CFragmentGetClass'
	DB	'StaticDataSizeBytes failed because ID was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@INGJBLPH@CFragmentGetClassStaticDataSize@
CONST	SEGMENT
??_C@_0EM@INGJBLPH@CFragmentGetClassStaticDataSize@ DB 'CFragmentGetClass'
	DB	'StaticDataSizeBytes failed because fragContext was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@LJHGJLBE@CFragmentGetClassStaticData?5fai@
CONST	SEGMENT
??_C@_0DK@LJHGJLBE@CFragmentGetClassStaticData?5fai@ DB 'CFragmentGetClas'
	DB	'sStaticData failed because ID was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@PCENFMFD@CFragmentGetClassStaticData?5fai@
CONST	SEGMENT
??_C@_0ED@PCENFMFD@CFragmentGetClassStaticData?5fai@ DB 'CFragmentGetClas'
	DB	'sStaticData failed because fragContext was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@HJDLONOA@CFragmentGetClassStaticData?5fai@
CONST	SEGMENT
??_C@_0DO@HJDLONOA@CFragmentGetClassStaticData?5fai@ DB 'CFragmentGetClas'
	DB	'sStaticData failed because outBuffer was NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@MMKFHGGJ@CFragmentGetVertexOutputCompone@
CONST	SEGMENT
??_C@_0EL@MMKFHGGJ@CFragmentGetVertexOutputCompone@ DB 'CFragmentGetVerte'
	DB	'xOutputComponentCount failed because outputID was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@BLOOMMA@CFragmentGetVertexOutputCompone@
CONST	SEGMENT
??_C@_0EO@BLOOMMA@CFragmentGetVertexOutputCompone@ DB 'CFragmentGetVertex'
	DB	'OutputComponentCount failed because fragContext was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@KLHEELBH@CFragmentUnsafeGetVertexOutputD@
CONST	SEGMENT
??_C@_0EJ@KLHEELBH@CFragmentUnsafeGetVertexOutputD@ DB 'CFragmentUnsafeGe'
	DB	'tVertexOutputDirect failed because outputID was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@MEONADAB@CFragmentUnsafeGetVertexOutputD@
CONST	SEGMENT
??_C@_0EM@MEONADAB@CFragmentUnsafeGetVertexOutputD@ DB 'CFragmentUnsafeGe'
	DB	'tVertexOutputDirect failed because fragContext was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@FJOFMIAP@CFragmentGetVertexOutput?5failed@
CONST	SEGMENT
??_C@_0DN@FJOFMIAP@CFragmentGetVertexOutput?5failed@ DB 'CFragmentGetVert'
	DB	'exOutput failed because outputID was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@EBHOJJGB@CFragmentGetVertexOutput?5failed@
CONST	SEGMENT
??_C@_0EA@EBHOJJGB@CFragmentGetVertexOutput?5failed@ DB 'CFragmentGetVert'
	DB	'exOutput failed because fragContext was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@OCCPJFIJ@CFragmentGetVertexOutput?5failed@
CONST	SEGMENT
??_C@_0DL@OCCPJFIJ@CFragmentGetVertexOutput?5failed@ DB 'CFragmentGetVert'
	DB	'exOutput failed because outBuffer was NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@JNPLMHLP@CFragmentGetDrawInputSizeBytes?5@
CONST	SEGMENT
??_C@_0EG@JNPLMHLP@CFragmentGetDrawInputSizeBytes?5@ DB 'CFragmentGetDraw'
	DB	'InputSizeBytes failed because drawInputID was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@BOLDLLL@CFragmentGetDrawInputSizeBytes?5@
CONST	SEGMENT
??_C@_0EG@BOLDLLL@CFragmentGetDrawInputSizeBytes?5@ DB 'CFragmentGetDrawI'
	DB	'nputSizeBytes failed because vertContext was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@ICDFJBAB@CFragmentUnsafeGetDrawInputDire@
CONST	SEGMENT
??_C@_0EJ@ICDFJBAB@CFragmentUnsafeGetDrawInputDire@ DB 'CFragmentUnsafeGe'
	DB	'tDrawInputDirect failed because drawInputID was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@BOCFGNAF@CFragmentUnsafeGetDrawInputDire@
CONST	SEGMENT
??_C@_0EJ@BOCFGNAF@CFragmentUnsafeGetDrawInputDire@ DB 'CFragmentUnsafeGe'
	DB	'tDrawInputDirect failed because vertContext was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@GJPPPMJL@CFragmentGetDrawInput?5failed?5be@
CONST	SEGMENT
??_C@_0DN@GJPPPMJL@CFragmentGetDrawInput?5failed?5be@ DB 'CFragmentGetDra'
	DB	'wInput failed because drawInputID was invalid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@DKLJCDOA@CFragmentGetDrawInput?5failed?5be@
CONST	SEGMENT
??_C@_0DI@DKLJCDOA@CFragmentGetDrawInput?5failed?5be@ DB 'CFragmentGetDra'
	DB	'wInput failed because outBuffer was NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@PFOPAAJP@CFragmentGetDrawInput?5failed?5be@
CONST	SEGMENT
??_C@_0DN@PFOPAAJP@CFragmentGetDrawInput?5failed?5be@ DB 'CFragmentGetDra'
	DB	'wInput failed because vertContext was invalid', 00H ; `string'
PUBLIC	CFragmentSampleRenderBuffer
PUBLIC	CFragmentGetClassStaticDataSizeBytes
PUBLIC	CFragmentGetClassStaticData
PUBLIC	CFragmentGetVertexOutputComponentCount
PUBLIC	CFragmentUnsafeGetVertexOutputDirect
PUBLIC	CFragmentGetVertexOutput
PUBLIC	CFragmentGetDrawInputSizeBytes
PUBLIC	CFragmentUnsafeGetDrawInputDirect
PUBLIC	CFragmentGetDrawInput
PUBLIC	CFragmentBlendColorWeighted
PUBLIC	CFragmentConvertColorToVect4
PUBLIC	CFragmentConvertColorToVect3
PUBLIC	CFragmentConvertVect4ToColor
PUBLIC	CFragmentConvertVect3ToColor
PUBLIC	CFragmentConvertFloat4ToColor
PUBLIC	CFragmentConvertFloat3ToColor
PUBLIC	CFragmentBlendColor
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentSampleRenderBuffer DD imagerel $LN46@CFragmentS
	DD	imagerel $LN46@CFragmentS+446
	DD	imagerel $unwind$CFragmentSampleRenderBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentGetClassStaticDataSizeBytes DD imagerel $LN6@CFragmentG
	DD	imagerel $LN6@CFragmentG+73
	DD	imagerel $unwind$CFragmentGetClassStaticDataSizeBytes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentGetClassStaticData DD imagerel $LN8@CFragmentG
	DD	imagerel $LN8@CFragmentG+62
	DD	imagerel $unwind$CFragmentGetClassStaticData
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$CFragmentGetClassStaticData DD imagerel $LN8@CFragmentG+62
	DD	imagerel $LN8@CFragmentG+109
	DD	imagerel $chain$0$CFragmentGetClassStaticData
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$CFragmentGetClassStaticData DD imagerel $LN8@CFragmentG+109
	DD	imagerel $LN8@CFragmentG+163
	DD	imagerel $chain$3$CFragmentGetClassStaticData
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentGetVertexOutputComponentCount DD imagerel $LN6@CFragmentG
	DD	imagerel $LN6@CFragmentG+71
	DD	imagerel $unwind$CFragmentGetVertexOutputComponentCount
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentUnsafeGetVertexOutputDirect DD imagerel $LN6@CFragmentU
	DD	imagerel $LN6@CFragmentU+71
	DD	imagerel $unwind$CFragmentUnsafeGetVertexOutputDirect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentGetVertexOutput DD imagerel $LN7@CFragmentG
	DD	imagerel $LN7@CFragmentG+135
	DD	imagerel $unwind$CFragmentGetVertexOutput
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentGetDrawInputSizeBytes DD imagerel $LN6@CFragmentG
	DD	imagerel $LN6@CFragmentG+73
	DD	imagerel $unwind$CFragmentGetDrawInputSizeBytes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentUnsafeGetDrawInputDirect DD imagerel $LN6@CFragmentU
	DD	imagerel $LN6@CFragmentU+75
	DD	imagerel $unwind$CFragmentUnsafeGetDrawInputDirect
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentGetDrawInput DD imagerel $LN7@CFragmentG
	DD	imagerel $LN7@CFragmentG+132
	DD	imagerel $unwind$CFragmentGetDrawInput
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentBlendColorWeighted DD imagerel $LN6
	DD	imagerel $LN6+63
	DD	imagerel $unwind$CFragmentBlendColorWeighted
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentConvertVect4ToColor DD imagerel $LN12
	DD	imagerel $LN12+123
	DD	imagerel $unwind$CFragmentConvertVect4ToColor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentConvertVect3ToColor DD imagerel $LN10
	DD	imagerel $LN10+101
	DD	imagerel $unwind$CFragmentConvertVect3ToColor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentConvertFloat4ToColor DD imagerel $LN12
	DD	imagerel $LN12+259
	DD	imagerel $unwind$CFragmentConvertFloat4ToColor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentConvertFloat3ToColor DD imagerel $LN10@CFragmentC
	DD	imagerel $LN10@CFragmentC+205
	DD	imagerel $unwind$CFragmentConvertFloat3ToColor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CFragmentBlendColor DD imagerel $LN32
	DD	imagerel $LN32+301
	DD	imagerel $unwind$CFragmentBlendColor
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentBlendColor DD 093001H
	DD	019830H
	DD	02882aH
	DD	037824H
	DD	046816H
	DD	0a208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentConvertFloat3ToColor DQ 00001981c00092b19r ; 2.21698e-309
	DQ	00003781000028816r		; 4.82423e-309
	DQ	00000a2040004680ar		; 8.80119e-310
	DD	imagerel __GSHandlerCheck
	DD	08H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentConvertFloat4ToColor DD 0d3719H
	DD	01b828H
	DD	02a822H
	DD	03981cH
	DD	048816H
	DD	057810H
	DD	06680aH
	DD	0e204H
	DD	imagerel __GSHandlerCheck
	DD	08H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentConvertVect3ToColor DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentConvertVect4ToColor DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentBlendColorWeighted DD 010801H
	DD	04208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentGetDrawInput DQ 00004745900055901r ; 6.19472e-309
	DQ	00000420400066454r		; 3.58617e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentUnsafeGetDrawInputDirect DQ 00000420400010401r ; 3.58617e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentGetDrawInputSizeBytes DQ 00000420400010401r ; 3.58617e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentGetVertexOutput DQ 00006645900045901r ; 8.88915e-309
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentUnsafeGetVertexOutputDirect DQ 00000420400010401r ; 3.58617e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentGetVertexOutputComponentCount DQ 00000420400010401r ; 3.58617e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$CFragmentGetClassStaticData DQ 00007640800040821r ; 1.02781e-308
	DD	063400H
	DD	imagerel $LN8@CFragmentG
	DD	imagerel $LN8@CFragmentG+62
	DD	imagerel $unwind$CFragmentGetClassStaticData
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$CFragmentGetClassStaticData DQ 00006340500020521r ; 8.62661e-309
	DD	imagerel $LN8@CFragmentG
	DD	imagerel $LN8@CFragmentG+62
	DD	imagerel $unwind$CFragmentGetClassStaticData
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentGetClassStaticData DQ 07002320600020601r ; 3.53109e+231
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentGetClassStaticDataSizeBytes DQ 00000420400010401r ; 3.58617e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CFragmentSampleRenderBuffer DQ 000037878000b7801r ; 4.82644e-309
	DQ	0000a645000046872r		; 1.44516e-308
	DQ	07003a207000f544br		; 3.81006e+231
	DD	03002H
; Function compile flags: /Ogtpy
; File C:\Bailey\Programming\Caesium\csm_fragment.c
;	COMDAT CFragmentBlendColor
_TEXT	SEGMENT
bottom$ = 96
rc$4 = 104
top$ = 104
CFragmentBlendColor PROC				; COMDAT

; 92   : CSMCALL CColor	CFragmentBlendColor(CColor bottom, CColor top) {

$LN32:
	mov	DWORD PTR [rsp+16], edx
	sub	rsp, 88					; 00000058H

; 99   : 	blend_c.x = new_c.x * alpha + (1.0f - alpha) * old_c.x;

	vmovss	xmm3, DWORD PTR __real@3f800000
	vmovaps	XMMWORD PTR [rsp+64], xmm6

; 85   : 	ret.x = color.r;

	mov	eax, ecx
	shr	eax, 16
	movzx	eax, al

; 92   : CSMCALL CColor	CFragmentBlendColor(CColor bottom, CColor top) {

	vmovaps	XMMWORD PTR [rsp+48], xmm7
	vmovaps	XMMWORD PTR [rsp+32], xmm8
	vmovaps	XMMWORD PTR [rsp+16], xmm9
	vxorps	xmm2, xmm2, xmm2

; 85   : 	ret.x = color.r;

	vcvtsi2ss xmm2, xmm2, eax
	vxorps	xmm1, xmm1, xmm1
	vxorps	xmm8, xmm8, xmm8
	vxorps	xmm0, xmm0, xmm0
	vxorps	xmm9, xmm9, xmm9
	vxorps	xmm6, xmm6, xmm6
	vxorps	xmm5, xmm5, xmm5

; 86   : 	ret.y = color.g;

	mov	eax, ecx
	shr	eax, 8
	movzx	eax, al
	vcvtsi2ss xmm8, xmm8, eax

; 87   : 	ret.z = color.b;

	movzx	eax, cl
	vcvtsi2ss xmm9, xmm9, eax

; 85   : 	ret.x = color.r;

	movzx	eax, BYTE PTR top$[rsp+2]
	vcvtsi2ss xmm1, xmm1, eax

; 86   : 	ret.y = color.g;

	movzx	eax, BYTE PTR top$[rsp+1]
	vcvtsi2ss xmm5, xmm5, eax

; 87   : 	ret.z = color.b;

	movzx	eax, dl
	vcvtsi2ss xmm6, xmm6, eax

; 88   : 	ret.w = color.a;

	movzx	eax, BYTE PTR top$[rsp+3]
	vcvtsi2ss xmm0, xmm0, eax

; 93   : 	CColor ret;
; 94   : 	CVect4F old_c = CFragmentConvertColorToVect4(bottom);
; 95   : 	CVect4F new_c = CFragmentConvertColorToVect4(top);
; 96   : 
; 97   : 	CVect3F blend_c;
; 98   : 	FLOAT  alpha = new_c.w * 0.003921568627f; // div by 255

	vmulss	xmm4, xmm0, DWORD PTR __real@3b808081

; 99   : 	blend_c.x = new_c.x * alpha + (1.0f - alpha) * old_c.x;

	vsubss	xmm0, xmm3, xmm4
	vmulss	xmm2, xmm0, xmm2
	vmulss	xmm1, xmm1, xmm4
	vaddss	xmm7, xmm2, xmm1

; 100  : 	blend_c.y = new_c.y * alpha + (1.0f - alpha) * old_c.y;

	vsubss	xmm0, xmm3, xmm4
	vmulss	xmm2, xmm0, xmm8

; 13   : 	_mm_store_ss(

	vmovss	xmm8, DWORD PTR __real@437f0000

; 101  : 	blend_c.z = new_c.z * alpha + (1.0f - alpha) * old_c.z;

	vsubss	xmm0, xmm3, xmm4
	vmulss	xmm1, xmm5, xmm4
	vaddss	xmm5, xmm2, xmm1
	vmulss	xmm1, xmm6, xmm4
	vmulss	xmm2, xmm0, xmm9
	vaddss	xmm6, xmm2, xmm1

; 13   : 	_mm_store_ss(

	vminss	xmm2, xmm8, xmm7

; 104  : }

	vmovaps	xmm7, XMMWORD PTR [rsp+48]
	vxorps	xmm4, xmm4, xmm4

; 13   : 	_mm_store_ss(

	vmaxss	xmm4, xmm4, xmm2
	vminss	xmm2, xmm8, xmm5
	vminss	xmm8, xmm8, xmm6

; 104  : }

	vmovaps	xmm6, XMMWORD PTR [rsp+64]

; 55   : 	rc.r = vect3.x;

	vcvttss2si eax, xmm4
	mov	BYTE PTR rc$4[rsp+2], al
	vxorps	xmm3, xmm3, xmm3

; 13   : 	_mm_store_ss(

	vmaxss	xmm3, xmm3, xmm2

; 56   : 	rc.g = vect3.y;

	vcvttss2si eax, xmm3
	mov	BYTE PTR rc$4[rsp+1], al
	vxorps	xmm1, xmm1, xmm1

; 13   : 	_mm_store_ss(

	vmaxss	xmm9, xmm1, xmm8

; 104  : }

	vmovaps	xmm8, XMMWORD PTR [rsp+32]

; 57   : 	rc.b = vect3.z;

	vcvttss2si eax, xmm9

; 104  : }

	vmovaps	xmm9, XMMWORD PTR [rsp+16]

; 57   : 	rc.b = vect3.z;

	mov	BYTE PTR rc$4[rsp], al

; 58   : 	rc.a = 255;

	mov	BYTE PTR rc$4[rsp+3], 255		; 000000ffH

; 102  : 	
; 103  : 	return CFragmentConvertVect3ToColor(blend_c);

	mov	eax, DWORD PTR rc$4[rsp]

; 104  : }

	add	rsp, 88					; 00000058H
	ret	0
CFragmentBlendColor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Bailey\Programming\Caesium\csm_fragment.c
;	COMDAT CFragmentConvertFloat4ToColor
_TEXT	SEGMENT
a$GSCopy$ = 0
b$GSCopy$ = 0
g$GSCopy$ = 0
r$GSCopy$ = 0
rc$ = 0
__$ArrayPad$ = 8
r$ = 128
g$ = 136
b$ = 144
a$ = 152
CFragmentConvertFloat4ToColor PROC			; COMDAT

; 37   : CSMCALL CColor	CFragmentConvertFloat4ToColor(FLOAT r, FLOAT g, FLOAT b, FLOAT a) {

$LN12:
	sub	rsp, 120				; 00000078H
	vmovaps	XMMWORD PTR [rsp+96], xmm6
	vmovaps	XMMWORD PTR [rsp+80], xmm7
	vmovaps	XMMWORD PTR [rsp+64], xmm8
	vmovaps	XMMWORD PTR [rsp+48], xmm9
	vmovaps	XMMWORD PTR [rsp+32], xmm10
	vmovaps	XMMWORD PTR [rsp+16], xmm11
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 13   : 	_mm_store_ss(

	vmovss	xmm8, DWORD PTR __real@437f0000

; 37   : CSMCALL CColor	CFragmentConvertFloat4ToColor(FLOAT r, FLOAT g, FLOAT b, FLOAT a) {

	vmovaps	xmm7, xmm1
	vxorps	xmm10, xmm1, xmm1
	vmovaps	xmm9, xmm2
	vmovaps	xmm11, xmm3
	vmovaps	xmm6, xmm0
	vxorps	xmm0, xmm0, xmm0

; 13   : 	_mm_store_ss(

	vmovss3	xmm1, xmm0, xmm6
	vminss	xmm2, xmm8, xmm1
	vmovss3	xmm1, xmm0, xmm7
	vxorps	xmm5, xmm5, xmm5
	vmaxss	xmm5, xmm5, xmm2
	vminss	xmm2, xmm8, xmm1
	vmovss3	xmm1, xmm0, xmm9

; 38   : 	_clampFloatToColorRange(&r);
; 39   : 	_clampFloatToColorRange(&g);
; 40   : 	_clampFloatToColorRange(&b);
; 41   : 	_clampFloatToColorRange(&a);
; 42   : 	CColor rc;
; 43   : 	rc.r = r;

	vcvttss2si eax, xmm5
	vmovss	DWORD PTR r$GSCopy$[rsp], xmm6
	vmovss	DWORD PTR g$GSCopy$[rsp], xmm7
	vxorps	xmm4, xmm4, xmm4

; 13   : 	_mm_store_ss(

	vmaxss	xmm4, xmm4, xmm2
	vminss	xmm2, xmm8, xmm1

; 37   : CSMCALL CColor	CFragmentConvertFloat4ToColor(FLOAT r, FLOAT g, FLOAT b, FLOAT a) {

	vmovss	DWORD PTR b$GSCopy$[rsp], xmm9
	vmovss	DWORD PTR a$GSCopy$[rsp], xmm11

; 38   : 	_clampFloatToColorRange(&r);
; 39   : 	_clampFloatToColorRange(&g);
; 40   : 	_clampFloatToColorRange(&b);
; 41   : 	_clampFloatToColorRange(&a);
; 42   : 	CColor rc;
; 43   : 	rc.r = r;

	mov	BYTE PTR rc$[rsp+2], al

; 44   : 	rc.g = g;

	vcvttss2si eax, xmm4
	mov	BYTE PTR rc$[rsp+1], al
	vxorps	xmm3, xmm3, xmm3

; 13   : 	_mm_store_ss(

	vmovss3	xmm1, xmm0, xmm11
	vmaxss	xmm3, xmm3, xmm2

; 45   : 	rc.b = b;

	vcvttss2si eax, xmm3
	mov	BYTE PTR rc$[rsp], al

; 13   : 	_mm_store_ss(

	vminss	xmm8, xmm8, xmm1
	vmaxss	xmm10, xmm10, xmm8

; 46   : 	rc.a = a;

	vcvttss2si eax, xmm10
	mov	BYTE PTR rc$[rsp+3], al

; 47   : 	return rc;

	mov	eax, DWORD PTR rc$[rsp]

; 48   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	vmovaps	xmm6, XMMWORD PTR [rsp+96]
	vmovaps	xmm7, XMMWORD PTR [rsp+80]
	vmovaps	xmm8, XMMWORD PTR [rsp+64]
	vmovaps	xmm9, XMMWORD PTR [rsp+48]
	vmovaps	xmm10, XMMWORD PTR [rsp+32]
	vmovaps	xmm11, XMMWORD PTR [rsp+16]
	add	rsp, 120				; 00000078H
	ret	0
CFragmentConvertFloat4ToColor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Bailey\Programming\Caesium\csm_fragment.c
;	COMDAT CFragmentConvertVect3ToColor
_TEXT	SEGMENT
rc$ = 0
vect3$ = 32
CFragmentConvertVect3ToColor PROC			; COMDAT

; 50   : CSMCALL CColor	CFragmentConvertVect3ToColor(CVect3F vect3) {

$LN10:
	sub	rsp, 24

; 13   : 	_mm_store_ss(

	vmovss	xmm1, DWORD PTR __real@437f0000
	vminss	xmm3, xmm1, DWORD PTR [rcx]
	vxorps	xmm0, xmm0, xmm0
	vmaxss	xmm0, xmm0, xmm3
	vmovss	DWORD PTR [rcx], xmm0
	vminss	xmm3, xmm1, DWORD PTR [rcx+4]
	vxorps	xmm0, xmm0, xmm0
	vmaxss	xmm0, xmm0, xmm3
	vmovss	DWORD PTR [rcx+4], xmm0
	vminss	xmm5, xmm1, DWORD PTR [rcx+8]
	vxorps	xmm2, xmm2, xmm2
	vmaxss	xmm4, xmm2, xmm5
	vmovss	DWORD PTR [rcx+8], xmm4

; 51   : 	_clampFloatToColorRange(&vect3.x);
; 52   : 	_clampFloatToColorRange(&vect3.y);
; 53   : 	_clampFloatToColorRange(&vect3.z);
; 54   : 	CColor rc;
; 55   : 	rc.r = vect3.x;

	vcvttss2si eax, DWORD PTR [rcx]
	mov	BYTE PTR rc$[rsp+2], al

; 56   : 	rc.g = vect3.y;

	vcvttss2si eax, DWORD PTR [rcx+4]
	mov	BYTE PTR rc$[rsp+1], al

; 57   : 	rc.b = vect3.z;

	vcvttss2si eax, xmm4
	mov	BYTE PTR rc$[rsp], al

; 58   : 	rc.a = 255;

	mov	BYTE PTR rc$[rsp+3], 255		; 000000ffH

; 59   : 	return rc;

	mov	eax, DWORD PTR rc$[rsp]

; 60   : }

	add	rsp, 24
	ret	0
CFragmentConvertVect3ToColor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Bailey\Programming\Caesium\csm_fragment.c
;	COMDAT CFragmentConvertVect4ToColor
_TEXT	SEGMENT
rc$ = 0
vect4$ = 32
CFragmentConvertVect4ToColor PROC			; COMDAT

; 62   : CSMCALL CColor	CFragmentConvertVect4ToColor(CVect4F vect4) {

$LN12:
	sub	rsp, 24

; 13   : 	_mm_store_ss(

	vmovss	xmm1, DWORD PTR __real@437f0000
	vminss	xmm3, xmm1, DWORD PTR [rcx]
	vxorps	xmm0, xmm0, xmm0
	vmaxss	xmm0, xmm0, xmm3
	vmovss	DWORD PTR [rcx], xmm0
	vminss	xmm3, xmm1, DWORD PTR [rcx+4]
	vxorps	xmm0, xmm0, xmm0
	vmaxss	xmm0, xmm0, xmm3
	vmovss	DWORD PTR [rcx+4], xmm0
	vminss	xmm3, xmm1, DWORD PTR [rcx+8]
	vxorps	xmm0, xmm0, xmm0
	vmaxss	xmm0, xmm0, xmm3
	vmovss	DWORD PTR [rcx+8], xmm0
	vminss	xmm5, xmm1, DWORD PTR [rcx+12]
	vxorps	xmm2, xmm2, xmm2
	vmaxss	xmm4, xmm2, xmm5
	vmovss	DWORD PTR [rcx+12], xmm4

; 63   : 	_clampFloatToColorRange(&vect4.x);
; 64   : 	_clampFloatToColorRange(&vect4.y);
; 65   : 	_clampFloatToColorRange(&vect4.z);
; 66   : 	_clampFloatToColorRange(&vect4.w);
; 67   : 	CColor rc;
; 68   : 	rc.r = vect4.x;

	vcvttss2si eax, DWORD PTR [rcx]
	mov	BYTE PTR rc$[rsp+2], al

; 69   : 	rc.g = vect4.y;

	vcvttss2si eax, DWORD PTR [rcx+4]
	mov	BYTE PTR rc$[rsp+1], al

; 70   : 	rc.b = vect4.z;

	vcvttss2si eax, DWORD PTR [rcx+8]
	mov	BYTE PTR rc$[rsp], al

; 71   : 	rc.a = vect4.w;

	vcvttss2si eax, xmm4
	mov	BYTE PTR rc$[rsp+3], al

; 72   : 	return rc;

	mov	eax, DWORD PTR rc$[rsp]

; 73   : }

	add	rsp, 24
	ret	0
CFragmentConvertVect4ToColor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Bailey\Programming\Caesium\csm_fragment.c
;	COMDAT CFragmentBlendColorWeighted
_TEXT	SEGMENT
c1$ = 48
c2$ = 56
factor$ = 64
CFragmentBlendColorWeighted PROC			; COMDAT

; 106  : CSMCALL CColor	CFragmentBlendColorWeighted(CColor c1, CColor c2, FLOAT factor) {

$LN6:
	mov	DWORD PTR [rsp+16], edx
	sub	rsp, 40					; 00000028H

; 107  : 	// clamp factor to [0, 1]
; 108  : 	factor = min(1.0f, max(0.0f, factor));

	vmovss	xmm1, DWORD PTR __real@3f800000
	vxorps	xmm3, xmm3, xmm3
	vmaxss	xmm0, xmm3, xmm2
	vcomiss	xmm0, xmm1
	ja	SHORT $LN4@CFragmentB
	vmaxss	xmm1, xmm3, xmm2
$LN4@CFragmentB:

; 109  : 
; 110  : 	c2.a = factor * 255.0f;

	vmulss	xmm0, xmm1, DWORD PTR __real@437f0000
	vcvttss2si eax, xmm0
	mov	BYTE PTR c2$[rsp+3], al

; 111  : 	return CFragmentBlendColor(c1, c2);

	mov	edx, DWORD PTR c2$[rsp]

; 112  : }

	add	rsp, 40					; 00000028H

; 111  : 	return CFragmentBlendColor(c1, c2);

	jmp	CFragmentBlendColor
CFragmentBlendColorWeighted ENDP
_TEXT	ENDS
END
